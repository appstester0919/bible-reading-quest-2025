'use client'

import { useState, useEffect } from 'react'
import { createClient } from '@/lib/supabase/client'
import ErrorBoundary from '@/components/ErrorBoundary'

// Static book list to avoid import issues
const SIMPLE_BOOKS = [
  'Genesis', 'Exodus', 'Leviticus', 'Numbers', 'Deuteronomy', 'Joshua',
  'Judges', 'Ruth', '1 Samuel', '2 Samuel', '1 Kings', '2 Kings',
  '1 Chronicles', '2 Chronicles', 'Ezra', 'Nehemiah', 'Esther', 'Job',
  'Psalms', 'Proverbs', 'Ecclesiastes', 'Song of Songs', 'Isaiah', 'Jeremiah',
  'Lamentations', 'Ezekiel', 'Daniel', 'Hosea', 'Joel', 'Amos',
  'Obadiah', 'Jonah', 'Micah', 'Nahum', 'Habakkuk', 'Zephaniah',
  'Haggai', 'Zechariah', 'Malachi', 'Matthew', 'Mark', 'Luke',
  'John', 'Acts', 'Romans', '1 Corinthians', '2 Corinthians', 'Galatians',
  'Ephesians', 'Philippians', 'Colossians', '1 Thessalonians', '2 Thessalonians', '1 Timothy',
  '2 Timothy', 'Titus', 'Philemon', 'Hebrews', 'James', '1 Peter',
  '2 Peter', '1 John', '2 John', '3 John', 'Jude', 'Revelation'
]

function SimpleMapComponent() {
  const [completedBooks, setCompletedBooks] = useState<string[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    async function loadData() {
      try {
        console.log('Starting data load...')
        
        const supabase = createClient()
        console.log('Supabase client created')
        
        const { data: { user } } = await supabase.auth.getUser()
        console.log('User data:', user?.id ? 'User found' : 'No user')
        
        if (user) {
          const { data: progressData } = await supabase
            .from('progress')
            .select('read_date')
            .eq('user_id', user.id)
          
          console.log('Progress data loaded:', progressData?.length || 0, 'records')
          
          // Simple completion logic - just use first few books as completed for testing
          setCompletedBooks(['Genesis', 'Exodus', 'Matthew'])
        }
        
        setLoading(false)
        console.log('Data load complete')
      } catch (err: any) {
        console.error('Data load error:', err)
        setError(err.message)
        setLoading(false)
      }
    }

    loadData()
  }, [])

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 flex items-center justify-center">
        <div className="bg-white rounded-lg p-8 text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto mb-4"></div>
          <p className="text-gray-600">載入中...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 flex items-center justify-center">
        <div className="bg-white rounded-lg p-8 text-center max-w-md">
          <h2 className="text-xl font-bold text-red-600 mb-4">載入錯誤</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
          >
            重新載入
          </button>
        </div>
      </div>
    )
  }

  const completedSet = new Set(completedBooks)

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500">
      <div className="container mx-auto py-8 px-4">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">我的讀經地圖</h1>
          <p className="text-white/80">已完成 {completedBooks.length} / {SIMPLE_BOOKS.length} 卷</p>
        </div>

        <div className="bg-white rounded-lg p-6 max-w-4xl mx-auto">
          <h2 className="text-2xl font-bold text-center mb-6">📚 聖經書卷進度</h2>
          
          <div className="grid grid-cols-6 gap-3 mb-6">
            {SIMPLE_BOOKS.map((book, index) => {
              const isCompleted = completedSet.has(book)
              return (
                <div
                  key={index}
                  className={`
                    aspect-square rounded-lg border-2 p-2 text-center flex flex-col items-center justify-center text-xs font-bold
                    transition-all duration-300
                    ${isCompleted 
                      ? 'bg-green-100 border-green-500 text-green-800' 
                      : 'bg-gray-100 border-gray-300 text-gray-600'
                    }
                  `}
                  title={book}
                >
                  <div className="leading-tight">
                    {book.length > 8 ? book.substring(0, 6) + '...' : book}
                  </div>
                  {isCompleted && (
                    <div className="text-green-600 text-sm mt-1">✓</div>
                  )}
                </div>
              )
            })}
          </div>

          <div className="bg-gray-50 rounded-lg p-4">
            <div className="flex justify-between items-center mb-2">
              <span className="font-medium text-gray-700">完成進度</span>
              <span className="text-xl font-bold text-green-600">
                {Math.round((completedBooks.length / SIMPLE_BOOKS.length) * 100)}%
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3">
              <div
                className="bg-gradient-to-r from-green-400 to-emerald-500 h-3 rounded-full transition-all duration-500"
                style={{ width: `${(completedBooks.length / SIMPLE_BOOKS.length) * 100}%` }}
              ></div>
            </div>
            <div className="text-center mt-2 text-sm text-gray-600">
              {completedBooks.length === SIMPLE_BOOKS.length 
                ? "🎉 恭喜！您已經完成所有書卷！" 
                : `還需要 ${SIMPLE_BOOKS.length - completedBooks.length} 卷，就能完成整本聖經`
              }
            </div>
          </div>
        </div>

        <div className="text-center mt-6">
          <button
            onClick={() => window.location.href = '/debug'}
            className="bg-white/20 hover:bg-white/30 text-white px-6 py-2 rounded-lg"
          >
            返回除錯頁面
          </button>
        </div>
      </div>
    </div>
  )
}

export default function SimpleMapPage() {
  return (
    <ErrorBoundary
      fallback={
        <div className="min-h-screen bg-red-50 p-4 flex items-center justify-center">
          <div className="bg-white rounded-lg shadow p-6 max-w-md text-center">
            <h1 className="text-xl font-bold text-red-600 mb-4">❌ 頁面錯誤</h1>
            <p className="text-gray-600 mb-4">簡化的地圖頁面仍然出現錯誤。</p>
            <button
              onClick={() => window.location.href = '/debug'}
              className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
            >
              返回除錯頁面
            </button>
          </div>
        </div>
      }
    >
      <SimpleMapComponent />
    </ErrorBoundary>
  )
}