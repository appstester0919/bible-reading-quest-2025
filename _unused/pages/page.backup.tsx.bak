'use client'

import { useState, useEffect } from 'react'
import { createClient } from '@/lib/supabase/client'
import Link from 'next/link'
import { ALL_BOOKS } from '@/lib/bibleData'
import MapView from '@/components/MapView'
import ErrorBoundary from '@/components/ErrorBoundary'
import type { User } from '@supabase/supabase-js'

// Helper function to parse reading strings like "Genesis 1-3" or "John 3"
const getBookFromReading = (reading: string): string => {
  return reading.split(' ').slice(0, -1).join(' ');
}

export default function MapPage() {
  const [user, setUser] = useState<User | null>(null)
  const [plan, setPlan] = useState<{ [date: string]: string[] } | null>(null)
  const [completedBooks, setCompletedBooks] = useState<string[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const supabase = createClient()

  // 計算完成的書卷
  const calculateCompletedBooks = (planData: { [date: string]: string[] }, completedDates: Set<string>) => {
    const completed: string[] = []
    ALL_BOOKS.forEach(book => {
      const datesForBook: string[] = []
      Object.entries(planData).forEach(([date, readings]) => {
        if (readings.some(r => getBookFromReading(r) === book.name)) {
          datesForBook.push(date)
        }
      })

      if (datesForBook.length > 0 && datesForBook.every(date => completedDates.has(date))) {
        completed.push(book.name)
      }
    })
    return completed
  }

  // 獲取數據並設置實時更新
  useEffect(() => {
    const fetchData = async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser()
        if (!user) {
          setIsLoading(false)
          return
        }
        setUser(user)

        // 獲取計劃數據
        const { data: planData } = await supabase
          .from('reading_plans')
          .select('generated_plan')
          .eq('user_id', user.id)
          .single()

        if (!planData) {
          setIsLoading(false)
          return
        }

        setPlan(planData.generated_plan)

        // 獲取進度數據
        const { data: progressData } = await supabase
          .from('progress')
          .select('read_date')
          .eq('user_id', user.id)

        const completedDates = new Set(progressData?.map(p => p.read_date) || [])
        const completed = calculateCompletedBooks(planData.generated_plan, completedDates)
        setCompletedBooks(completed)

        setIsLoading(false)
      } catch (error) {
        console.error('Error fetching map data:', error)
        setIsLoading(false)
      }
    }

    fetchData()

    // 設置實時訂閱進度更新
    if (user) {
      const progressSubscription = supabase
        .channel(`progress_changes_${user.id}`)
        .on('postgres_changes', 
          { 
            event: '*', 
            schema: 'public', 
            table: 'progress',
            filter: `user_id=eq.${user.id}`
          }, 
          async (payload) => {
            console.log('🗺️ Map: Progress updated:', payload)
            // 重新獲取最新進度數據
            try {
              const { data: progressData } = await supabase
                .from('progress')
                .select('read_date')
                .eq('user_id', user.id)

              if (plan) {
                const completedDates = new Set(progressData?.map(p => p.read_date) || [])
                const completed = calculateCompletedBooks(plan, completedDates)
                console.log('🧩 Updated completed books:', completed.length)
                setCompletedBooks(completed)
              }
            } catch (error) {
              console.error('Error updating map progress:', error)
            }
          }
        )
        .subscribe()

      return () => {
        progressSubscription.unsubscribe()
      }
    }
  }, [supabase, user, plan])

  // 添加定期刷新機制作為備用
  useEffect(() => {
    if (!user || !plan) return

    const refreshInterval = setInterval(async () => {
      try {
        const { data: progressData } = await supabase
          .from('progress')
          .select('read_date')
          .eq('user_id', user.id)

        const completedDates = new Set(progressData?.map(p => p.read_date) || [])
        const completed = calculateCompletedBooks(plan, completedDates)
        setCompletedBooks(completed)
        console.log('🔄 Map: Periodic refresh completed')
      } catch (error) {
        console.error('Error during periodic refresh:', error)
      }
    }, 30000) // 每30秒刷新一次

    return () => clearInterval(refreshInterval)
  }, [supabase, user, plan])

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center mobile-padding">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto mb-4"></div>
          <p className="text-white">載入地圖中...</p>
        </div>
      </div>
    )
  }

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center mobile-padding">
        <p className="text-white">請登入以查看您的地圖。</p>
      </div>
    )
  }

  if (!plan) {
    return (
      <div className="min-h-screen flex items-center justify-center mobile-padding">
        <div className="card-modern p-8 text-center max-w-md w-full">
          <div className="w-16 h-16 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-6">
            <span className="text-white text-2xl">🗺️</span>
          </div>
          <h1 className="text-2xl font-bold mb-4 text-gray-800">尚未建立讀經計劃</h1>
          <p className="text-gray-600 mb-8 leading-relaxed">您需要先建立一個讀經計劃才能查看您的地圖進度。</p>
          <Link href="/plan" className="btn-primary inline-block">立即制定計劃</Link>
        </div>
      </div>
    )
  }

  const showEncouragement = completedBooks.length > 0 && completedBooks.length % 3 === 0;
  const showFireworks = completedBooks.length === ALL_BOOKS.length;

  return (
    <ErrorBoundary>
      <div className="min-h-screen mobile-app-container">
        <div className="container-responsive py-4 md:py-6">
          <div className="text-center mb-6">
            <h1 className="text-2xl md:text-3xl font-bold text-white mb-2">我的拼圖地圖</h1>
            <p className="text-white/80 text-sm md:text-base">每完成一卷書，就會點亮一塊地圖。已完成 {completedBooks.length} / {ALL_BOOKS.length} 卷。</p>
          </div>
          <div className="card-modern p-4 md:p-6 mb-16 max-w-6xl mx-auto">
            <MapView completedBooks={completedBooks} showEncouragement={showEncouragement} showFireworks={showFireworks} />
          </div>
        </div>
      </div>
    </ErrorBoundary>
  )
}
