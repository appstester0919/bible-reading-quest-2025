'use client'

import { useState, useEffect } from 'react'
import { createClient } from '@/lib/supabase/client'
import ErrorBoundary from '@/components/ErrorBoundary'
import { ALL_BOOKS } from '@/lib/bibleData'

function SimpleMapPageContent() {
  const [completedBooks, setCompletedBooks] = useState<string[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [user, setUser] = useState<any>(null)

  useEffect(() => {
    async function loadData() {
      try {
        const supabase = createClient()
        
        // Get user
        const { data: { user } } = await supabase.auth.getUser()
        if (!user) {
          setLoading(false)
          return
        }
        setUser(user)

        // Get progress data
        const { data: progressData } = await supabase
          .from('progress')
          .select('read_date')
          .eq('user_id', user.id)

        // Simple logic: just count progress entries for now
        // This avoids the complex book calculation that might be causing issues
        const progressCount = progressData?.length || 0
        
        // Create a simple completed books list based on progress
        const completed: string[] = []
        for (let i = 0; i < Math.min(progressCount, ALL_BOOKS.length); i++) {
          completed.push(ALL_BOOKS[i].name)
        }
        
        setCompletedBooks(completed)
        setLoading(false)
      } catch (err: any) {
        console.error('Error loading map data:', err)
        setError(err.message)
        setLoading(false)
      }
    }

    loadData()
  }, [])

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 flex items-center justify-center">
        <div className="bg-white rounded-lg p-8 text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto mb-4"></div>
          <p className="text-gray-600">載入地圖中...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 flex items-center justify-center">
        <div className="bg-white rounded-lg p-8 text-center max-w-md">
          <h2 className="text-xl font-bold text-red-600 mb-4">載入錯誤</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
          >
            重新載入
          </button>
        </div>
      </div>
    )
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 flex items-center justify-center">
        <div className="bg-white rounded-lg p-8 text-center max-w-md">
          <h2 className="text-xl font-bold text-gray-800 mb-4">請先登入</h2>
          <p className="text-gray-600 mb-4">您需要登入才能查看讀經地圖。</p>
          <button
            onClick={() => window.location.href = '/login'}
            className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
          >
            前往登入
          </button>
        </div>
      </div>
    )
  }

  const completedSet = new Set(completedBooks)

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500">
      <div className="container mx-auto py-8 px-4">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">我的讀經地圖</h1>
          <p className="text-white/80">已完成 {completedBooks.length} / {ALL_BOOKS.length} 卷</p>
        </div>

        <div className="bg-white rounded-lg p-6 max-w-6xl mx-auto mb-16">
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-2">📚 聖經書卷進度</h2>
            <p className="text-gray-600">完成每卷聖經，解鎖一本書卷</p>
            <div className="text-sm text-gray-500 mt-2">
              已完成 {completedBooks.length} / 66 卷
            </div>
          </div>
          
          <div className="grid grid-cols-6 gap-3 mb-6">
            {ALL_BOOKS.map((book, index) => {
              const isCompleted = completedSet.has(book.name)
              return (
                <div
                  key={index}
                  className={`
                    aspect-square rounded-lg border-2 p-2 text-center flex flex-col items-center justify-center text-xs font-bold
                    transition-all duration-300
                    ${isCompleted 
                      ? 'bg-green-100 border-green-500 text-green-800' 
                      : 'bg-gray-100 border-gray-300 text-gray-600'
                    }
                  `}
                  title={`${book.name} (${book.chapters}章)`}
                >
                  <div className="leading-tight">
                    {book.name.length > 8 ? book.name.substring(0, 6) + '...' : book.name}
                  </div>
                  {isCompleted && (
                    <div className="text-green-600 text-sm mt-1">✓</div>
                  )}
                </div>
              )
            })}
          </div>

          <div className="bg-gray-50 rounded-lg p-4">
            <div className="flex justify-between items-center mb-2">
              <span className="font-medium text-gray-700">完成進度</span>
              <span className="text-xl font-bold text-green-600">
                {Math.round((completedBooks.length / ALL_BOOKS.length) * 100)}%
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3">
              <div
                className="bg-gradient-to-r from-green-400 to-emerald-500 h-3 rounded-full transition-all duration-500"
                style={{ width: `${(completedBooks.length / ALL_BOOKS.length) * 100}%` }}
              ></div>
            </div>
            <div className="text-center mt-2 text-sm text-gray-600">
              {completedBooks.length === ALL_BOOKS.length 
                ? "🎉 恭喜！您已經完成所有書卷！" 
                : `還需要 ${ALL_BOOKS.length - completedBooks.length} 卷，就能完成整本聖經`
              }
            </div>
          </div>

          <div className="mt-4 p-3 bg-blue-50 rounded-lg border-l-4 border-blue-500">
            <div className="text-xs text-gray-600">
              <div className="font-semibold text-gray-700 mb-1">📱 iOS 優化版本</div>
              <div>
                為了確保在 iOS 設備上的穩定性，我們使用了簡化的地圖顯示。
                功能完全相同，只是視覺效果更簡潔。
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default function MapPage() {
  return (
    <ErrorBoundary
      fallback={
        <div className="min-h-screen bg-red-50 p-4 flex items-center justify-center">
          <div className="bg-white rounded-lg shadow p-6 max-w-md text-center">
            <h1 className="text-xl font-bold text-red-600 mb-4">❌ 地圖載入失敗</h1>
            <p className="text-gray-600 mb-4">很抱歉，地圖頁面在您的設備上遇到問題。</p>
            <div className="space-y-2">
              <button
                onClick={() => window.location.reload()}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded w-full"
              >
                重新載入
              </button>
              <button
                onClick={() => window.location.href = '/dashboard'}
                className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded w-full"
              >
                返回主頁
              </button>
            </div>
          </div>
        </div>
      }
    >
      <SimpleMapPageContent />
    </ErrorBoundary>
  )
}